#!/bin/bash
# shellcheck disable=SC2046
# shellcheck disable=SC2155
#
# asg-functions

asgs() {
  local asg_names=$(__bma_read_inputs)
  local filters=$(__bma_read_filters "$@")

  # shellcheck disable=SC2086
  aws autoscaling describe-auto-scaling-groups            \
    ${asg_names:+'--auto-scaling-group-names' $asg_names} \
    --query "
      AutoScalingGroups[].[[
        AutoScalingGroupName,
        join(' ', Tags[?Key=='Name'].Value),
        join(',' sort(AvailabilityZones))
      ]]"                                                 \
    --output text       |
  grep -E -- "$filters" |
  column -s$'\t' -t
}

asg-capacity() {
  # returns min, desired and maximum capacities of autoscaling group
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z $asg_names ]] && __bma_usage "auto-scaling-group" && return 1

  # shellcheck disable=SC2086
  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names $asg_names      \
    --query "
    AutoScalingGroups[][
        AutoScalingGroupName,
        MinSize,
        DesiredCapacity,
        MaxSize
    ]"                                         \
    --output text   |
  column -s$'\t' -t
}

asg-desired-size-set() {
  # sets the desired capacity of an autoscaling group
  local capacity="$1"
  shift
  local asg_names=$(__bma_read_inputs "$@")
  if [[ -z $asg_names ]] || [[ -z $capacity ]] || [[ $capacity =~ [^0-9]+ ]]; then
    __bma_usage "capacity asg_name [asg_name]"
    return 1
  fi

  local asg_name
  for asg_name in $asg_names; do
    aws autoscaling set-desired-capacity    \
      --auto-scaling-group-name "$asg_name" \
      --desired-capacity "$capacity"
  done
}

asg-instances() {
  # returns instances of autoscaling group(s)
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group" && return 1

  # shellcheck disable=SC2086
  local instance_ids="$(
    aws autoscaling describe-auto-scaling-groups             \
      --auto-scaling-group-names $asg_names                  \
      --query "AutoScalingGroups[].Instances[].[InstanceId]" \
      --output text
  )"
  if [[ -n "$instance_ids" ]]; then
    echo "$instance_ids" | instances
  fi
}

asg-launch-configuration() {
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group" && return 1

  # shellcheck disable=SC2086
  local launch_configuration_names="$(
    aws autoscaling describe-auto-scaling-groups              \
      --auto-scaling-group-names $asg_names                   \
      --query "AutoScalingGroups[].[LaunchConfigurationName]" \
      --output text)"

  if [[ -n "$launch_configuration_names" ]]; then
    launch-configurations "$launch_configuration_names"
  fi
}

launch-configurations() {
  local launch_configuration_names=$(__bma_read_inputs "$@")

  aws autoscaling describe-launch-configurations                \
    ${launch_configuration_names:+'--launch-configuration-names' $launch_configuration_names} \
    --query "
        LaunchConfigurations[].[
          LaunchConfigurationName,
          ImageId,
          InstanceType
        ]"                                                                                                       \
    --output text |
  column -s$'\t' -t
}

launch-configuration-asgs() {
  local launch_configuration_names=$(__bma_read_inputs "$@")
  if [[ -z $launch_configuration_names ]] ; then
    __bma_usage "launch_configuration [launch_configuration]"
    return 1
  fi

  local launch_configuration_name
  for launch_configuration_name in $launch_configuration_names; do
    echo -n "$launch_configuration_name "
    aws autoscaling describe-auto-scaling-groups                                  \
      --query "join(',',
        AutoScalingGroups[?LaunchConfigurationName=='$launch_configuration_name'].
          AutoScalingGroupName
        )"                                                                        \
      --output text
  done |
  column -s$'\t' -t
}

asg-max-size-set() {
  # sets maximum size of autoscaling group(s)
  local capacity="$1"
  shift
  local asg_names=$(__bma_read_inputs "$@")
  if [[ -z $asg_names ]] || [[ -z $capacity ]] || [[ $capacity =~ [^0-9]+ ]]; then
    __bma_usage "capacity asg_name [asg_name]"
    return 1
  fi

  local asg_name
  for asg_name in $asg_names; do
    aws autoscaling update-auto-scaling-group \
      --auto-scaling-group-name "$asg_name"   \
      --max-size "$capacity"
  done
}

asg-min-size-set() {
  # sets the minimum size of an autoscaling group
  local capacity="$1"
  shift
  local asg_names=$(__bma_read_inputs "$@")
  if [[ -z $asg_names ]] || [[ -z $capacity ]] || [[ $capacity =~ [^0-9]+ ]]; then
    __bma_usage "capacity asg_name [asg_name]"
    return 1
  fi

  local asg_name
  for asg_name in $asg_names; do
    aws autoscaling update-auto-scaling-group \
      --auto-scaling-group-name "$asg_name"   \
      --min-size "$capacity"
  done
}

asg-processes_suspended() {
  # returns the suspended processes of an autoscaling group
  # TODO: fix the output
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z $asg_names ]] && __bma_usage "auto-scaling-group" && return 1

  # shellcheck disable=SC2086
  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names $asg_names      \
    --query "
      AutoScalingGroups[][
        AutoScalingGroupName,
        SuspendedProcesses
      ]"                                       \
<<<<<<< HEAD
    --output text    |
=======
    --output text                              |
>>>>>>> Add asg-tags(), asg-tag()
  column -s$'\t' -t
}

asg-resume() {
  # resumes all processes of an autoscaling group
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z $asg_names ]] && __bma_usage "auto-scaling-group" && return 1

  local asg_name
  for asg_name in $asg_names; do
    aws autoscaling resume-processes --auto-scaling-group-name "$asg_name"
  done
}

asg-suspend() {
  # suspends all processes of an autoscaling group
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z $asg_names ]] && __bma_usage "asg_name [asg_name]" && return 1

  local asg_name
  for asg_name in $asg_names; do
    aws autoscaling suspend-processes       \
      --auto-scaling-group-name "$asg_name"
  done
}

asg-stack() {
  # returns CloudFormation stack for asg(s)
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z $asg_names ]] && __bma_usage "asg_name [asg_name]" && return 1

  # shellcheck disable=SC2086
  aws autoscaling describe-auto-scaling-groups                       \
    --auto-scaling-group-names $asg_names                            \
    --query "
      AutoScalingGroups[][
        [
          [Tags[?Key=='aws:cloudformation:stack-name'].Value][0][0],
          AutoScalingGroupName
        ]
      ][]"                                                           \
    --output text   |
  column -s$'\t' -t
}


asg-scaling-activities() {
  # show all scaling activities
  local asg_names=$(__bma_read_inputs "$@")
  [[ -z $asg_names ]] && __bma_usage "auto-scaling-group" && return 1

  local asg_name
  for asg_name in $asg_names; do
    aws autoscaling describe-scaling-activities \
      --auto-scaling-group-name "$asg_name"     \
      --output json
  done
}


asg-tags() {
  # returns the tags applied autoscaling groups
  local asg_names=$(__bma_read_inputs $@)
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group [auto-scaling-group]" && return 1

  aws autoscaling describe-auto-scaling-groups                               \
    $([[ -n "$asg_names" ]] && echo --auto-scaling-group-names "$asg_names") \
    --query "
      AutoScalingGroups[].[
        AutoScalingGroupName,
        join(' ', [Tags[].[join('=',[Key,Value])][]][])
      ]"                                                                     \
    --output text    |
  column -s$'\t' -t
}


asg-tag () {
  local tag=$1;
  shift 1;
  [[ -z "${tag}" ]] && __bma_usage "tag-key auto-scaling-group [auto-scaling-group]" && return 1;

  local asg_names=$(__bma_read_inputs $@)
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group [auto-scaling-group]" && return 1

  aws autoscaling describe-auto-scaling-groups                               \
    $([[ -n "$asg_names" ]] && echo --auto-scaling-group-names "$asg_names") \
    --query "
      AutoScalingGroups[].[
        AutoScalingGroupName,
        join(' ', [Tags[?Key=='$tag'].[join('=',[Key,Value])][]][])
      ]"                                                                     \
    --output text    |
  column -s$'\t' -t
}


# asg-tag-apply () {
#   local tag_key=$1
#   local tag_value=$2
#   shift 2
#   local usage_msg="tag-key tag-value auto-scaling-group [auto-scaling-group]"
#   [[ -z "$tag_key" ]]    && __bma_usage $usage_msg && return 1
#   [[ -z "$tag_value" ]] && __bma_usage $usage_msg && return 1
# 
#   local asg_names=$(__bma_read_inputs $@)
#   [[ -z "$asg_names" ]] && __bma_usage $usage_msg && return 1
# 
#   aws ec2 create-tags                          \
#     --resources $asg_names                     \
#     --tags "Key=${tag_key},Value=${tag_value}"
# }


# vim: ft=sh
